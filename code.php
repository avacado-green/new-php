<?php
$a = 5;
$b = '05';
var_dump($a == $b);
var_dump((int)'012345');
var_dump((float)123.0 === (int)123.0);
var_dump(0 == 'hello, world');
?>

var_dump($a == $b);

Сравнивает $a и $b с использованием оператора ==. При этом выполняется неявное приведение типов:

$a (целое число 5)

$b (строка '05', приводится к целому числу 5)
bool(true)

var_dump((int)'012345');

Приводит строку '012345' к целому числу с использованием (int):

Строка '012345' становится числом 12345

int(12345)

var_dump((float)123.0 === (int)123.0);

Сравнивает (с использованием ===, то есть строгое сравнение) значение:

(float)123.0 (число с плавающей точкой 123.0)

(int)123.0 (целое число 123)

Поскольку типы данных различны (float и int), результат: false
bool(false)

var_dump(0 == 'hello, world');

Сравнивает 0 и строку 'hello, world' с использованием оператора ==. Строка 'hello, world' приводится к числу:

Поскольку строка не начинается с числового значения, она приводится к 0
bool(true)

Вывод
bool(true)
int(12345)
bool(false)
bool(true)

Вывод кода не изменится при переходе с PHP 8.2 на PHP 7.4, так как эти операции и правила приведения типов остались неизменными между этими версиями.

<?php
$a = 1;
$b = 2;

$a = $a + $b;
$b = $a - $b;
$a = $a - $b;

echo "a = $a, b = $b";
?>
